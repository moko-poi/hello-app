name: Build And Test

on:
  push:
    branches:
      - 'main'
    paths:
      - '**.go'
      - 'Dockerfile'
  pull_request:
    branches:
      - 'main'
    paths:
      - '**.go'
      - 'Dockerfile'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Build
      run: go build -v ./...
    - name: Test
      run: go test -v ./...
  docker-build:
    outputs:
      tags: ${{steps.meta.outputs.tags}}
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "TAG=`git describe --tags`" >> $GITHUB_ENV
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.TAG }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  register-event:
    if: ${{ github.event_name != 'pull_request' }}
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ needs.docker-build.outputs.tags }}
      - uses: docker://gcr.io/pipecd/pipectl:v0.16.0
        with:
          args: event register --insecure --address=${{ secrets.PIPECD_API_ADDRESS }} --api-key=${{ secrets.PIPECD_API_KEY }} --name=dev-image-update --data=${{ needs.docker-build.outputs.tags }}
